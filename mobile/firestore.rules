rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is member of family
    function isFamilyMember(familyId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/families/$(familyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Prevent accidental deletion
    }
    
    // Families collection
    match /families/{familyId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid in resource.data.memberIds || 
         request.auth.uid == resource.data.createdBy);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (request.auth.uid in resource.data.memberIds || 
         request.auth.uid == resource.data.createdBy);
      allow delete: if false; // Prevent accidental deletion
    }
    
    // Children collection
    match /children/{childId} {
      allow read: if isAuthenticated() && 
        isFamilyMember(resource.data.familyId);
      allow create: if isAuthenticated() && 
        isFamilyMember(request.resource.data.familyId);
      allow update: if isAuthenticated() && 
        isFamilyMember(resource.data.familyId);
      allow delete: if false; // Prevent accidental deletion
    }
    
    // Episodes collection
    match /episodes/{episodeId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid ||
         resource.data.user_id == request.auth.uid);
      allow create: if isAuthenticated() && 
        (request.resource.data.userId == request.auth.uid ||
         request.resource.data.user_id == request.auth.uid);
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid ||
         resource.data.user_id == request.auth.uid);
      allow delete: if false; // Prevent accidental deletion
    }
    
    // Media uploads collection
    match /media_uploads/{uploadId} {
      allow read: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
      allow delete: if false; // Prevent accidental deletion
    }
    
    // File uploads collection (legacy)
    match /file_uploads/{uploadId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
  }
}